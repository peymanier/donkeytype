// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: options.sql

package database

import (
	"context"
)

const addOption = `-- name: AddOption :exec
INSERT INTO options (id, choice_id, value)
VALUES (?, ?, ?)
ON CONFLICT (id) DO UPDATE SET value     = excluded.value,
                               choice_id = excluded.choice_id
`

type AddOptionParams struct {
	ID       string
	ChoiceID string
	Value    string
}

func (q *Queries) AddOption(ctx context.Context, arg AddOptionParams) error {
	_, err := q.db.ExecContext(ctx, addOption, arg.ID, arg.ChoiceID, arg.Value)
	return err
}

const listOptions = `-- name: ListOptions :many
SELECT id, choice_id, value
FROM options
`

func (q *Queries) ListOptions(ctx context.Context) ([]Option, error) {
	rows, err := q.db.QueryContext(ctx, listOptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Option
	for rows.Next() {
		var i Option
		if err := rows.Scan(&i.ID, &i.ChoiceID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
